pipeline{
    agent any
    parameters {
        string(name: 'deploymentId', defaultValue: '')
    }
    environment{
        AWS_ACCESS_KEY = credentials('AWS_ACCESS_KEY')
        AWS_SECRET_KEY = credentials('AWS_SECRET_KEY')
        AWS_REGION = credentials('AWS_REGION')
        TF_IN_AUTOMATION = "true"
    }
    stages{
        stage("Clone"){
            steps{
                echo "======== Clone Repo ========"
                dir('./'){
                    script{
                        try {
                            def file ="./tfvpc/vpc.tf"
                            def fileFound = fileExists(file)
                            if(fileFound){
                                sh "rm -R ./tfvpc/ -f"
                            }
                            sh "git init"
                            sh "git config remote.origin.url git@gitlab.com:bcx-sanlam-group/tfvpc.git"
                            sh "git clone git@gitlab.com:bcx-sanlam-group/tfvpc.git" 
                        } catch (Exception err){
                            println(err)
                        }
                    }
                }
            }
        }
        stage("Init"){
            steps{
                echo "======== Executing Init ========"
                dir('./tfvpc/bin'){
                    script{
                        try { 
                            sh "unset BUCKET"
                            sh "unset DYNAMODB_TABLE"
                            // sh "unset DIR"
                            sh "export BUCKET=`python3 ./util/helper.py state ${deploymentId} S3`"
                            sh "export DYNAMODB_TABLE=`python3 ./util/helper.py state ${deploymentId} DYN`"
                            def BUCKET = "${env.BUCKET}"
                            def DYNAMODB_TABLE = "${env.DYNAMODB_TABLE}"
                            // sh "export DIR=`python3 ./util/helper.py wsdir ${deploymentId}`"
                            // println('DIR =')
                            // println(DIR)
                            sh "terraform init -input=false \
                                -backend-config='bucket=${env.BUCKET}' \
                                -backend-config='dynamodb_table=${env.DYNAMODB_TABLE}' \
                                -backend-config='access_key=${AWS_ACCESS_KEY}' \
                                -backend-config='secret_key=${AWS_SECRET_KEY}' \
                                -backend-config='region=${AWS_REGION}' \
                                -reconfigure"
                            // sh "terraform validate"
                        } catch (Exception err){
                            println(err)
                            // throw new Exception("Unable to perform init, try again!")
                        }
                    }
                }
            }
        }
        // stage("Plan"){
        //     steps{
        //         echo "======== Executing Plan ========"
        //         dir('./tfvpc/bin'){
        //             script{
        //                 try { 
        //                     def file ="./.terraform/terraform.tfstate"
        //                     def fileFound = fileExists(file)
        //                     sh "terraform plan \
        //                     -var 'id=${params.deploymentId}' \
        //                     -var 'aws_access_key=${AWS_ACCESS_KEY}' \
        //                     -var 'aws_secret_key=${AWS_SECRET_KEY}' \
        //                     -var 'aws_region=${AWS_REGION}' \
        //                     -out ${params.deploymentId}-apply.tfplan"
        //                     stash name: "terraform-plan", includes: "${params.deploymentId}-apply.tfplan"
        //                 } catch (Exception err){
        //                     println(err)
        //                     throw new Exception("Unable perform plan, try again!")
        //                 }
        //             }
        //         }
        //     }
        // }
        // stage("Apply"){
        //     steps{
        //         echo "======== Executing Apply ========"
        //         script {
        //             def apply = false
        //             try {
        //                 input message: 'Confirm Apply', ok: 'Apply Config'
        //                 apply = true
        //             } catch (Exception err) {
        //                 dir('./tfvpc/bin'){
        //                     sh "terraform destroy \
        //                     -var 'id=${params.deploymentId}' \
        //                     -var 'aws_access_key=${AWS_ACCESS_KEY}' \
        //                     -var 'aws_secret_key=${AWS_SECRET_KEY}' \
        //                     -var 'aws_region=${AWS_REGION}' \
        //                     -auto-approve"
        //                     sh "terraform output -json > ${params.deploymentId}-output.json"
        //                     sh "python3 ./util/helper.py status ${params.deploymentId}"
        //                 }
        //                 currentBuild.result = 'UNSTABLE'
        //             }
        //             if(apply){
        //                 dir('./tfvpc/bin'){
        //                     unstash "terraform-plan"
        //                     sh "terraform apply ${params.deploymentId}-apply.tfplan"
        //                     sh "terraform output -json > ${params.deploymentId}-output.json"
        //                     sh "python3 ./util/helper.py status ${params.deploymentId}"
        //                 }
        //             }
        //         }
        //     }
        // }
    }
}
