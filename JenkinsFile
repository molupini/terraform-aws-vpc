def refresh = false
pipeline{
    agent any
    parameters {
        string(name: "deploymentId", defaultValue: "5dbadb1a7bc9d7001e92ee2d")
    }
    environment{
        AWS_ACCESS_KEY = credentials("AWS_ACCESS_KEY")
        AWS_SECRET_KEY = credentials("AWS_SECRET_KEY")
        // AWS_REGION = credentials("AWS_REGION")
        AWS_REGION = "eu-west-1"
        TF_IN_AUTOMATION = "true"
    }
    stages{
        stage("Clone"){
            steps{
                echo "======== Clone Repo ========"
                dir("./"){
                    script{
                        try {
                            def file ="./tfvpc/vpc.tf"
                            def fileFound = fileExists(file)
                            println("vpc.tf, exists = ${fileFound}")
                            if(!fileFound){
                                sh "rm -R ./tfvpc/ -f"
                            } 
                            sh "git init"
                            sh "git config remote.origin.url git@gitlab.com:bcx-sanlam-group/tfvpc.git"
                            sh "git clone git@gitlab.com:bcx-sanlam-group/tfvpc.git" 
                        } catch (Exception err){
                            println(err)
                            throw new Exception("Unable to perform clone, try again!")
                        }
                    }
                }
            }
        }
        stage("Init"){
            steps{
                echo "======== Executing Init ========"
                dir("./tfvpc/bin"){
                    script{
                        try { 
                            // PARAMS
                            def s3 = sh(script: "python3 ./util/helper.py state ${params.deploymentId} S3", returnStdout: true)
                            def dyn = sh(script: "python3 ./util/helper.py state ${params.deploymentId} DYN", returnStdout: true)
                            println("variables =")
                            println(s3)
                            println(dyn)
                            // CACHE PLUG-INS
                            def file = "../../.terraform/plugins/linux_amd64/lock.json"
                            def fileFound = fileExists(file)
                            println("lock.json, exists = ${fileFound}")

                            if(fileFound){
                                sh "terraform init \
                                -input=false \
                                -backend-config='access_key=${AWS_ACCESS_KEY}' \
                                -backend-config='secret_key=${AWS_SECRET_KEY}' \
                                -backend-config='region=${AWS_REGION}' \
                                -reconfigure \
                                -plugin-dir ../../.terraform/plugins/linux_amd64"
                                // -backend-config='bucket=${BUCKET}' \
                                // -backend-config='dynamodb_table=${DYNAMODB_TABLE}' \
                            } 
                            else {
                                sh "terraform init \
                                -input=false \
                                -backend-config='access_key=${AWS_ACCESS_KEY}' \
                                -backend-config='secret_key=${AWS_SECRET_KEY}' \
                                -backend-config='region=${AWS_REGION}' \
                                -reconfigure"
                                // -backend-config='bucket=${BUCKET}' \
                                // -backend-config='dynamodb_table=${DYNAMODB_TABLE}' \
                                sh "cp -r ./.terraform/ ../../"
                            }

                            sh "python3 ./util/helper.py status ${params.deploymentId} 1 state"
                        } catch (Exception err){
                            sh "rm -R ../../.terraform/ -f"
                            // sh "terraform init \
                            // -input=false \
                            // -backend-config='bucket=${BUCKET}' \
                            // -backend-config='dynamodb_table=${DYNAMODB_TABLE}' \
                            // -backend-config='access_key=${AWS_ACCESS_KEY}' \
                            // -backend-config='secret_key=${AWS_SECRET_KEY}' \
                            // -backend-config='region=${AWS_REGION}' \
                            // -reconfigure \
                            // -plugin-dir ''"
                            // println(err)
                            // COMMENT OUT THROW FOR THE INTERIM
                            // throw new Exception("Unable to perform init, try again!")
                            sh "python3 ./util/helper.py status ${params.deploymentId} 2 state"
                        }
                    }
                }
            }
        }
        stage("Validate"){
            steps{
                // VERIFY WORKING HCL / TERRAFORM SOURCE CODE 
                echo "======== Executing Validation ========"
                dir("./tfvpc/bin"){
                    script{
                        try { 
                            sh "terraform validate"
                        } catch (Exception err){
                            println(err)
                            throw new Exception("Unable to perform validation, try again!")
                        }
                    }
                }
            }
        }
        stage("Workspace"){
            steps{
                // VERIFY IF WORKSPACE EXISTS IF NOT THEN CREATE
                echo "======== Executing Workspace ========"
                dir("./tfvpc/bin"){
                    script{
                        try { 
                            sh "terraform workspace select ${params.deploymentId}_tfvpc"
                        } catch (Exception err){
                            sh "terraform workspace new ${env.deploymentId}_tfvpc"
                        }
                    }
                }
            }
        }
        stage("Plan"){
            steps{
                echo "======== Executing Plan ========"
                dir("./tfvpc/bin"){
                    script{
                        try { 
                            sh "terraform plan \
                            -var 'id=${params.deploymentId}' \
                            -var 'aws_access_key=${AWS_ACCESS_KEY}' \
                            -var 'aws_secret_key=${AWS_SECRET_KEY}' \
                            -var 'aws_region=${AWS_REGION}'"
                            sh "python3 ./util/helper.py status ${params.deploymentId} 3 state"
                        } catch (Exception err){
                            println(err)
                            throw new Exception("Unable perform plan, try again!")
                            sh "python3 ./util/helper.py status ${params.deploymentId} 4 state"
                        }
                    }
                }
            }
        }
        stage("Apply"){
            steps{
                // INPUT REQUIRED IF TO APPLY OR ABOUT WHICH WILL DESTROY 
                // APPLY FALSE - WILL PLAN THE DESTROY AND THEN APPLY
                // APPLY TRUE - SEE BELOW #
                echo "======== Executing Apply ========"
                script {
                    def apply = false
                    try {
                        input message: "Confirm Apply", ok: "Apply Config"
                        apply = true
                    } catch (Exception er) {
                        dir("./tfvpc/bin"){
                            // PLAN DESTROY
                            sh "terraform plan -destroy \
                            -var 'id=${params.deploymentId}' \
                            -var 'aws_access_key=${AWS_ACCESS_KEY}' \
                            -var 'aws_secret_key=${AWS_SECRET_KEY}' \
                            -var 'aws_region=${AWS_REGION}'"
                            // APPLY DESTROY
                            try {
                                input message: "Confirm Destroy", ok: "Destroy Config"
                                destroy = true
                                if(destroy){
                                    sh "terraform apply \
                                    -var 'id=${params.deploymentId}' \
                                    -var 'aws_access_key=${AWS_ACCESS_KEY}' \
                                    -var 'aws_secret_key=${AWS_SECRET_KEY}' \
                                    -var 'aws_region=${AWS_REGION}'"
                                    sh "python3 ./util/helper.py status ${params.deploymentId} 8 state"
                                    currentBuild.result = "UNSTABLE"
                                }
                            } catch(Exception err){
                                currentBuild.result = "FAILURE"
                                throw new Exception("Unable perform destroy, try again!")
                            }
                        }
                    }
                    // # APPLY - TRUE, BUILD
                    // IF ANY ERROR IN CATCH FORCE REFRESH
                    if(apply){
                        dir("./tfvpc/bin"){
                            try {
                                sh "terraform apply \
                                -var 'id=${params.deploymentId}' \
                                -var 'aws_access_key=${AWS_ACCESS_KEY}' \
                                -var 'aws_secret_key=${AWS_SECRET_KEY}' \
                                -var 'aws_region=${AWS_REGION}'"
                            } catch (Exception err) {
                                refresh = true
                            }
                        } 
                        sh "python3 ./util/helper.py status ${params.deploymentId} 6 state"
                    }
                }
            }
        }
        // TODO VERIFY IF NECESSARY
        stage("Refresh"){
            steps{
                echo "======== Executing Refresh ========"
                dir("./tfvpc/bin"){
                    script{
                        try { 
                            println("refresh = ${refresh}")
                            if(refresh){
                                sh "terraform refresh \
                                -var 'id=${params.deploymentId}' \
                                -var 'aws_access_key=${AWS_ACCESS_KEY}' \
                                -var 'aws_secret_key=${AWS_SECRET_KEY}' \
                                -var 'aws_region=${AWS_REGION}'"
                                currentBuild.result = "UNSTABLE"
                            } 
                        } catch (Exception err){
                            println(err)
                            throw new Exception("Unable to perform refresh, try again!")
                        }
                    }
                }
            }
        }
    }
}
