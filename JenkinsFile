pipeline{
    options {
        buildDiscarder(logRotator(numToKeepStr: '2', daysToKeepStr: '1', artifactDaysToKeepStr: '3', artifactNumToKeepStr: '4'))
    }
    agent any
    parameters {
        string(name: "deploymentId", defaultValue: "5e468fc5240d850025a8661e", description: 'DeploymentId, Group Resources/Configuration and Tagging', trim: true)
    }
    environment{
        AWS_ACCESS_KEY = credentials("AWS_ACCESS_KEY")
        AWS_SECRET_KEY = credentials("AWS_SECRET_KEY")
        AWS_REGION = credentials("AWS_REGION")
        // AWS_REGION = "eu-west-1"
        TF_IN_AUTOMATION = "true"
    }
    stages{
        stage("Clone"){
            steps{
                echo "======== Clone Repo ========"
                dir("./"){
                    script{
                        try {
                            def file ="./terraform-aws-vpc/vpc.tf"
                            def fileFound = fileExists(file)
                            println("vpc.tf, exists = ${fileFound}")
                            if(!fileFound){
                                sh "rm -R ./terraform-aws-vpc/ -f"
                            } 
                            sh "git init"
                            sh "git clone https://github.com/molupini/terraform-aws-vpc.git"
                        } catch (Exception err){
                            println(err)
                            throw new Exception("Unable to perform clone, try again!")
                        }
                    }
                }
            }
        }
        stage("Init"){
            steps{
                echo "======== Executing Init ========"
                dir("./terraform-aws-vpc/bin"){
                    script{
                        try { 
                            // CACHE PLUG-INS
                            def file = "../../.terraform/plugins/linux_amd64/lock.json"
                            def fileFound = fileExists(file)
                            println("lock.json, exists = ${fileFound}")
                            if(fileFound){
                                sh(script: """
                                terraform init \
                                -input=false \
                                -backend-config="access_key=${AWS_ACCESS_KEY}" \
                                -backend-config="secret_key=${AWS_SECRET_KEY}" \
                                -backend-config="region=${AWS_REGION}" \
                                -backend-config="bucket=`python3 ./util/helper.py discovery ${params.deploymentId} s3 Name application=tfsta state=6`" \
                                -backend-config="dynamodb_table=`python3 ./util/helper.py discovery ${params.deploymentId} dyn Name application=tfsta state=6`"
                                -reconfigure \
                                -plugin-dir ../../.terraform/plugins/linux_amd64"
                                """)
                            } 
                            else {
                                sh(script: """
                                terraform init \
                                -input=false \
                                -backend-config="access_key=${AWS_ACCESS_KEY}" \
                                -backend-config="secret_key=${AWS_SECRET_KEY}" \
                                -backend-config="region=${AWS_REGION}" \
                                -backend-config="bucket=`python3 ./util/helper.py discovery ${params.deploymentId} s3 Name application=tfsta state=6`" \
                                -backend-config="dynamodb_table=`python3 ./util/helper.py discovery ${params.deploymentId} dyn Name application=tfsta state=6`" \
                                -reconfigure
                                """)
                                sh "cp -r ./.terraform/ ../../"
                            }
                            sh "python3 ./util/helper.py status ${params.deploymentId} 1"
                        } catch (Exception err){
                            sh "rm -R ../../.terraform/ -f"
                            sh "python3 ./util/helper.py status ${params.deploymentId} 2"
                        }
                    }
                }
            }
        }
        stage("Validate"){
            steps{
                // VERIFY WORKING HCL / TERRAFORM SOURCE CODE 
                echo "======== Executing Validation ========"
                dir("./terraform-aws-vpc/bin"){
                    script{
                        try { 
                            sh "terraform validate"
                        } catch (Exception err){
                            println(err)
                            throw new Exception("Unable to perform validation, try again!")
                        }
                    }
                }
            }
        }
        stage("Workspace"){
            steps{
                // VERIFY IF WORKSPACE EXISTS IF NOT THEN CREATE
                echo "======== Executing Workspace ========"
                dir("./terraform-aws-vpc/bin"){
                    script{
                        try { 
                            sh "terraform workspace select ${params.deploymentId}_tfvpc"
                        } catch (Exception err){
                            sh "terraform workspace new ${env.deploymentId}_tfvpc"
                        }
                    }
                }
            }
        }
        stage("Plan"){
            steps{
                echo "======== Executing Plan ========"
                dir("./terraform-aws-vpc/bin"){
                    script{
                        try {
                            sh(script: """
                            terraform plan \
                            -var "aws_access_key=${AWS_ACCESS_KEY}" \
                            -var "aws_secret_key=${AWS_SECRET_KEY}" \
                            -var "aws_region=${AWS_REGION}" \
                            -var "vpc=`python3 ./util/helper.py app ${params.deploymentId} tag vpc`" \
                            -var "publicSuffix=`python3 ./util/helper.py abbr perimeter public`" \
                            -var "privateSuffix=`python3 ./util/helper.py abbr perimeter private`" \
                            -out apply.tfplan
                            """)
                            sh "python3 ./util/helper.py status ${params.deploymentId} 3"
                        } catch (Exception err){
                            println(err)
                            throw new Exception("Unable perform plan, try again!")
                            sh "python3 ./util/helper.py status ${params.deploymentId} 4"
                        }
                    }
                }
            }
        }
        stage("Apply"){
            steps{
                // INPUT REQUIRED IF TO APPLY OR ABOUT WHICH WILL DESTROY 
                // APPLY FALSE - WILL PLAN THE DESTROY AND THEN APPLY
                // APPLY TRUE - SEE BELOW #
                echo "======== Executing Apply ========"
                script {
                    def apply = false
                    try {
                        input message: "Confirm Apply", ok: "Apply Config"
                        apply = true
                    } catch (Exception er) {
                        dir("./terraform-aws-vpc/bin"){
                            // PLAN DESTROY
                            sh(script: """
                            terraform plan -destroy \
                            -var "aws_access_key=${AWS_ACCESS_KEY}" \
                            -var "aws_secret_key=${AWS_SECRET_KEY}" \
                            -var "aws_region=${AWS_REGION}" \
                            -var "vpc=`python3 ./util/helper.py app ${params.deploymentId} tag vpc`" \
                            -var "publicSuffix=`python3 ./util/helper.py abbr perimeter public`" \
                            -var "privateSuffix=`python3 ./util/helper.py abbr perimeter private`" \
                            -out destroy.tfplan
                            """)
                            // APPLY DESTROY
                            try {
                                input message: "Confirm Destroy", ok: "Destroy Config"
                                destroy = true
                                if(destroy){
                                    sh "terraform apply destroy.tfplan"
                                    sh "python3 ./util/helper.py status ${params.deploymentId} 8"
                                    currentBuild.result = "UNSTABLE"
                                }
                            } catch(Exception err){
                                currentBuild.result = "FAILURE"
                                throw new Exception("Unable perform destroy, try again!")
                            }
                        }
                    }
                    // # APPLY - TRUE, BUILD
                    // IF ANY ERROR IN CATCH FORCE REFRESH
                    if(apply){
                        dir("./terraform-aws-vpc/bin"){
                            try {
                                // APPLY
                                sh "terraform apply apply.tfplan"
                                sh "python3 ./util/helper.py status ${params.deploymentId} 6"
                                // SEED
                                sh "terraform output -json > ${params.deploymentId}-output.json"
                                sh "python3 ./util/helper.py seed ${params.deploymentId}  resource aws_vpc_id logicalId"
                            } catch (Exception err) {
                                println(err)
                                throw new Exception("Unable perform apply, try again!")
                                sh "python3 ./util/helper.py status ${params.deploymentId} 4"
                            }
                        } 
                    }
                }
            }
        }
    }
}
